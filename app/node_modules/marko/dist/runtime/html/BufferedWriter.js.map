{"version":3,"sources":["../../../src/runtime/html/BufferedWriter.js"],"names":["immediate","require","setImmediate","clearImmediate","StringWriter","BufferedWriter","wrappedStream","call","_wrapped","_scheduled","prototype","Object","assign","scheduleFlush","flush","bind","end","isTTY","writer","contents","toString","length","write","clear","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAzB;AACA,MAAMC,YAAY,GAAGF,SAAS,IAA9B;AACA,MAAMG,cAAc,GAAGH,SAAS,IAAhC;AACA,MAAMI,YAAY,GAAGH,OAAO,CAAC,gBAAD,CAA5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,cAAT,CAAwBC,aAAxB,EAAuC;AACrCF,EAAAA,YAAY,CAACG,IAAb,CAAkB,IAAlB;AACA,OAAKC,QAAL,GAAgBF,aAAhB;AACA,OAAKG,UAAL,GAAkB,IAAlB;AACD;;AAEDJ,cAAc,CAACK,SAAf,GAA2BC,MAAM,CAACC,MAAP;AACzB;AACEC,EAAAA,aAAa,GAAG;AACd,QAAI,CAAC,KAAKJ,UAAV,EAAsB;AACpB,WAAKA,UAAL,GAAkBP,YAAY,CAACY,KAAK,CAACC,IAAN,CAAW,CAAX,EAAc,IAAd,CAAD,CAA9B;AACD;AACF,GALH;;AAOEC,EAAAA,GAAG,EAAE,YAAY;AACfF,IAAAA,KAAK,CAAC,IAAD,CAAL;AACA,QAAI,CAAC,KAAKN,QAAL,CAAcS,KAAnB,EAA0B;AACxB,WAAKT,QAAL,CAAcQ,GAAd;AACD;AACF,GAZH,EADyB;;AAezBZ,YAAY,CAACM,SAfY,CAA3B;;;AAkBA,SAASI,KAAT,CAAeI,MAAf,EAAuB;AACrB,QAAMC,QAAQ,GAAGD,MAAM,CAACE,QAAP,EAAjB;AACA,MAAID,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACzBH,IAAAA,MAAM,CAACV,QAAP,CAAgBc,KAAhB,CAAsBH,QAAtB;AACAD,IAAAA,MAAM,CAACK,KAAP;AACA,QAAIL,MAAM,CAACV,QAAP,CAAgBM,KAApB,EAA2B;AACzBI,MAAAA,MAAM,CAACV,QAAP,CAAgBM,KAAhB;AACD;AACF;;AAEDX,EAAAA,cAAc,CAACe,MAAM,CAACT,UAAR,CAAd;AACAS,EAAAA,MAAM,CAACT,UAAP,GAAoB,IAApB;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiBpB,cAAjB","sourcesContent":["\"use strict\";\n\nconst immediate = require(\"../setImmediate\");\nconst setImmediate = immediate.___setImmediate;\nconst clearImmediate = immediate.___clearImmediate;\nconst StringWriter = require(\"./StringWriter\");\n\n/**\n * Simple wrapper that can be used to wrap a stream\n * to reduce the number of write calls. In Node.js world,\n * each stream.write() becomes a chunk. We can avoid overhead\n * by reducing the number of chunks by buffering the output.\n */\nfunction BufferedWriter(wrappedStream) {\n  StringWriter.call(this);\n  this._wrapped = wrappedStream;\n  this._scheduled = null;\n}\n\nBufferedWriter.prototype = Object.assign(\n  {\n    scheduleFlush() {\n      if (!this._scheduled) {\n        this._scheduled = setImmediate(flush.bind(0, this));\n      }\n    },\n\n    end: function () {\n      flush(this);\n      if (!this._wrapped.isTTY) {\n        this._wrapped.end();\n      }\n    }\n  },\n  StringWriter.prototype\n);\n\nfunction flush(writer) {\n  const contents = writer.toString();\n  if (contents.length !== 0) {\n    writer._wrapped.write(contents);\n    writer.clear();\n    if (writer._wrapped.flush) {\n      writer._wrapped.flush();\n    }\n  }\n\n  clearImmediate(writer._scheduled);\n  writer._scheduled = null;\n}\n\nmodule.exports = BufferedWriter;\n"],"file":"BufferedWriter.js"}